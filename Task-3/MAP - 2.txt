1. word0 
public Map<String, Integer> word0(String[] strings) {
  Map<String, Integer> map = new HashMap();
  for (String s:strings) {
    map.put(s, 0);
  }
  return map;
}


2. wordLen
public Map<String, Integer> wordLen(String[] strings) {
  Map<String, Integer> map = new HashMap();
  for (String s:strings) {
    map.put(s,s.length());
  }
  return map;
}
        
3. pairs
public Map<String, String> pairs(String[] strings) {
  Map<String, String> map = new HashMap();
  for (String s:strings) {
    map.put(s.substring(0,1), s.substring(s.length()-1));
  }
  return map;
}


4. wordCount        
public Map<String, Integer> wordCount(String[] strings) {
  Map<String, Integer> m=new HashMap<>();
  for(String s:strings){
    if(m.containsKey(s))
    m.put(s,m.get(s)+1);
    else
    m.put(s,1);
  }
  return m;
}


5. firstChar         
public Map<String, String> firstChar(String[] strings) {
  Map<String, String> m=new HashMap<>();
  for(int i=0;i<strings.length;i++){
    String a=strings[i];
    String c=a.substring(0,1);
    if(m.containsKey(c))
    m.put(c,m.get(c)+a);
    else
    m.put(c,a);
  }
  return m;
}


6. wordAppend
public String wordAppend(String[] strings) {
  String a="";
  HashMap<String,Integer> m=new HashMap<>();
  for(String s:strings){
    if(m.containsKey(s))
    m.put(s,m.get(s)+1);
    else
    m.put(s,1);
    if(m.get(s)%2==0)
    a+=s;
  }
  return a;
}


7. wordMultiple          
public Map<String, Boolean> wordMultiple(String[] strings) {
  Map<String, Boolean> m=new HashMap<>();
  for(String s:strings){
    if(m.containsKey(s))
    m.put(s,true);
    else
    m.put(s,false);
  }
  return m;
}


8. allSwap 
public String[] allSwap(String[] strings) {
  HashMap<String,Integer> m=new HashMap<>();
  for(int i=0;i<strings.length;i++){
    String s=strings[i];
    if(m.containsKey(s.substring(0,1))){
      String temp=strings[m.get(s.substring(0,1))];
      strings[m.get(s.substring(0,1))]=s;
      strings[i]=temp;
      m.remove(s.substring(0,1));
    }
    else
    m.put(s.substring(0,1),i);
  }
  return strings;
}
        
9. firstSwap
public String[] firstSwap(String[] strings) {
  HashMap<String,Integer> m=new HashMap<>();
  HashSet<String> hs=new HashSet<>();
  for(int i=0;i<strings.length;i++){
    String s=strings[i];
    if(m.containsKey(s.substring(0,1))){
      String temp=strings[m.get(s.substring(0,1))];
      strings[m.get(s.substring(0,1))]=s;
      strings[i]=temp;
      m.remove(s.substring(0,1));
    }
    else if(!hs.contains(s.substring(0,1))){
      m.put(s.substring(0,1),i);
      hs.add(s.substring(0,1));
    }
  }
  return strings;
}