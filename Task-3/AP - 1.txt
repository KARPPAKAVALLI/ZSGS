1. scoresIncreasing
public boolean scoresIncreasing(int[] scores) {
  for(int i=1;i<scores.length;i++){
    if(scores[i]<scores[i-1])
    return false;
  }
  return true;
}
         
2. scores100        
public boolean scores100(int[] scores) {
  for(int i=1;i<scores.length;i++){
    if(scores[i]==100 && scores[i-1]==100)
    return true;
  }
  return false;
}


3. scoresClump
public boolean scoresClump(int[] scores) {
  int c=1;
  for(int i=0;i<=scores.length-3;i++){
    if(scores[i+1]-scores[i]<=2 && scores[i+2]-scores[i+1]<=2 && scores[i+2]-scores[i]<=2)
    return true;
  }
  return false;
}


4.  scoresAverage
public int scoresAverage(int[] scores) {
  return Math.max(average(scores,0,scores.length/2),average(scores,scores.length/2,scores.length));
}
int average(int[] scores, int start, int end){
  int sum=0;
  for(int i=start;i<end;i++)
  sum+=scores[i];
  return sum/(end-start);
}


 






5. wordsCount        
 public int wordsCount(String[] words, int len) {
  int c=0;
  for(String s:words){
    if(s.length()==len)
    c++;
  }
  return c;
}


6. wordsFront
public String[] wordsFront(String[] words, int n) {
  String[] ans= Arrays.copyOf(words,n);
  return ans;
}


7. wordsWithoutList
public List wordsWithoutList(String[] words, int len) {
  List<String> a=new ArrayList<>();
  for(String s:words){
    if(s.length()!=len)
    a.add(s);
  }
  return a;
}
         
8. hasOne        
 public boolean hasOne(int n) {
  while(n>0){
    if(n%10==1)
    return true;
    n=n/10;
  }
  return false;
}


9. dividesSelf
public boolean dividesSelf(int n) {
  int a=n;
  while(a>0){
    if(a%10==0||n%(a%10)!=0)
    return false;
    a/=10;
  }
  return true;
}


10.  copyEvens         
public int[] copyEvens(int[] nums, int count) {
  int[]ans=new int[count];
  int j=0;
  for(int i:nums){
    if(i%2==0)
    ans[j++]=i;
    if(j==count)
    break;
  }
  return ans;
}


11. copyEndy         
public int[] copyEndy(int[] nums, int count) {
  int j=0;
  int[]ans=new int[count];
  for(int i:nums){
    if(isEndy(i))
    ans[j++]=i;
    if(j==count)
    break;
  }
  return ans;
}
public boolean isEndy(int n){
  return (n>=0 && n<=10) ||(n>=90 && n<=100);
}


12. matchUp
public int matchUp(String[] a, String[] b) {
  int c=0;
  for(int i=0;i<a.length;i++){
    if(!a[i].equals("") && !b[i].equals("") && a[i].charAt(0)==b[i].charAt(0))
    c++;
  }
  return c;
}






13.  scoreUp         
public int scoreUp(String[] key, String[] answers) {
  int n=0;
  for(int i=0;i<key.length;i++){
    if(answers[i].equals("?"))
    continue;
    else if(!key[i].equals(answers[i]))
    n-=1;
    else
    n+=4;
  }
  return n;
}


14. wordsWithout         
public String[] wordsWithout(String[] words, String target) {
  String[] a=new String[words.length];
  int j=0;
  for(String s:words){
    if(!s.equals(target))
    a[j++]=s;
  }
  return Arrays.copyOf(a,j);
}


15. scoresSpecial
public int scoresSpecial(int[] a, int[] b) {
  int m1=0,m2=0;
  for(int i=0;i<a.length;i++){
    if(isSpecial(a[i]) && m1<a[i])
    m1=a[i];
  }
  for(int i=0;i<b.length;i++){
    if(isSpecial(b[i]) && m2<b[i])
    m2=b[i];
  }
  return m1+m2;
}
public boolean isSpecial(int n){
  return n%10==0;
}






16.  sumHeights         
public int sumHeights(int[] heights, int start, int end) {
  int change=0;
  for(int i=start+1;i<=end;i++){
    change+=Math.abs(heights[i]-heights[i-1]);
  }
  return change;
}


17. sumHeights2         
public int sumHeights2(int[] heights, int start, int end) {
  int change=0;
  for(int i=start+1;i<=end;i++){
    if(heights[i]-heights[i-1]>0)
    change+=(heights[i]-heights[i-1])*2;
    else
    change+=Math.abs(heights[i]-heights[i-1]);
  }
  return change;
}


18. bigHeights
public int bigHeights(int[] heights, int start, int end) {
  int c=0;
  for(int i=start+1;i<=end;i++){
    if(Math.abs(heights[i]-heights[i-1])>=5)
    c++;
  }
  return c;
}


19.  userCompare         
public int userCompare(String aName, int aId, String bName, int bId) {
  if(aName.compareTo(bName)==0){
    if(aId<bId)
    return -1;
    else if(aId>bId)
    return 1;
    else 
    return 0;
  }
  else if(aName.compareTo(bName)>0)
  return 1;
  else
  return -1;
}


20. mergeTwo         
public String[] mergeTwo(String[] a, String[] b, int n) {
  String ans[]=new String[n];
  int i=0,j=0,k=0;
  while(i<a.length&&j<b.length){
    if(a[i].compareTo(b[j])<0){
      ans[k++]=a[i];
      i++;
    }
    else if(a[i].compareTo(b[j])>0){
      ans[k++]=b[j];
      j++;
    }
    else{
      ans[k++]=b[j];
      j++;
      i++;
    }
    if(k==n)
    break;
  }
  return ans;
}


21. commonTwo
public int commonTwo(String[] a, String[] b) {
  int i=0,j=0,c=0;
  HashSet<String>m=new HashSet<>();
  while(i<a.length&&j<b.length){
    if(a[i].compareTo(b[j])<0){
      i++;
    }
    else if(a[i].compareTo(b[j])>0){
      j++;
    }
    else{
      if(!m.contains(a[i])){
        m.add(a[i]);
        c++;
      }
      i++;
      j++;
    }
  }
  return c;
}